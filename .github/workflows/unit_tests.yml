name: unit tests

on:
  push: # run on every push or PR to any branch
  pull_request:
  schedule: # run automatically on main branch each Tuesday at 11am
    - cron: "0 16 * * 2"

jobs:
  python-unit:
    name: Python unit tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.5, 3.6]
        # solr: [8.6, 6.6]
        solr: [6.6]
        django: [0, 2.2]
    # We use service containers to avoid needing to set up a local copy of
    # mysql or postgres on the test runner instance. This syntax is similar to
    # the spec of a docker-compose file. For more, see:
    # https://docs.github.com/en/free-pro-team@latest/actions/guides/about-service-containers
    services:
      solr:
        env:
          SOLR_HOME: "/opt/solr/server/solr"
        image: solr:${{ matrix.solr }}
        ports:
          - 8983:8983
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      # We base the python cache on the hash of all requirements files, so that
      # if any change, the cache is invalidated.
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            pip-${{ hashFiles('setup.py') }}
            pip-

      - name: Install package with dependencies
        run: |
          if [ "${{ matrix.django }}" -gt "0"]; then pip install -q Django==${{ matrix.django }} pytest-django; fi
          pip install -e .
          pip install -e '.[test]'
          pip install codecov

      - name: Setup test settings
        run: |
          cp ci/testsettings.py testsettings.py
          python -c "import uuid; print('SECRET_KEY = \'%s\'' % uuid.uuid4())" >> testsettings.py

      - name: Run pytest
        env:
          SOLR_VERSION: "${{ matrix.solr }}"
        run: py.test --cov=parasolr --cov-report=xml

      - name: Upload test coverage to Codecov
        uses: codecov/codecov-action@v1

      # Set the color of the slack message used in the next step based on the
      # status of the build: "warning" for failure and "good" for success
      # - name: Set Slack message color based on build status
      #   if: ${{ always() }}
      #   env:
      #     JOB_STATUS: ${{ job.status }}
      #   run: echo "SLACK_COLOR=$(if [ "$JOB_STATUS" == "success" ]; then echo "good"; else echo "warning"; fi)" >> $GITHUB_ENV

      # Send a message to slack to report the build status. The webhook is stored
      # at the organization level and available to all repositories. Only run on
      # scheduled builds & pushes, since PRs automatically report to Slack.
      # - name: Report status to Slack
      #   uses: rtCamp/action-slack-notify@master
      #   if: ${{ always() && (github.event_name == 'schedule' || github.event_name == 'push') }}
      #   env:
      #     SLACK_COLOR: ${{ env.SLACK_COLOR }}
      #     SLACK_WEBHOOK: ${{ secrets.ACTIONS_SLACK_WEBHOOK }}
      #     SLACK_TITLE: "Run #${{ github.run_number }} for workflow `${{ github.workflow }}`: ${{ job.status }}"
      #     SLACK_MESSAGE: "<https://github.com/${{ github.repository }}/|${{ github.repository }}@${{ github.ref }}>"
      #     SLACK_FOOTER: "<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|View commit>"
      #     MSG_MINIMAL: true # use compact slack message format
